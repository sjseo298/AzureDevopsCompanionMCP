package com.mcp.server.utils.team;

import com.mcp.server.tools.azuredevops.client.AzureDevOpsClient;
import com.mcp.server.tools.azuredevops.model.Iteration;

import java.util.*;

/**
 * Manejador especializado para operaciones con equipos y configuraci√≥n de √°reas en Azure DevOps.
 * Extra√≠do de DiscoverOrganizationTool para mejorar la separaci√≥n de responsabilidades.
 */
public class TeamConfigurationManager {
    
    private final AzureDevOpsClient azureDevOpsClient;
    
    public TeamConfigurationManager(AzureDevOpsClient azureDevOpsClient) {
        this.azureDevOpsClient = azureDevOpsClient;
    }
    
    /**
     * Ejecuta la navegaci√≥n a nivel de equipo y √°rea
     */
    public Map<String, Object> executeTeamLevel(String projectName, String teamName, String areaPath) {
        StringBuilder result = new StringBuilder();
        result.append("üë• **NAVEGACI√ìN POR EQUIPO/√ÅREA - PASO 3/5**\n");
        result.append("==========================================\n\n");
        result.append("üìÇ **Proyecto:** ").append(projectName).append("\n");
        if (teamName != null) {
            result.append("üë• **Equipo:** ").append(teamName).append("\n");
        }
        if (areaPath != null) {
            result.append("üóÇÔ∏è **√Årea Path:** ").append(areaPath).append("\n");
        }
        result.append("\n");
        
        try {
            // Analizar iteraciones si hay equipo seleccionado
            if (teamName != null) {
                result.append("üìÖ **ITERACIONES DEL EQUIPO:**\n");
                result.append("============================\n");
                
                List<Iteration> iterations = azureDevOpsClient.listIterations(projectName, teamName, null);
                if (iterations.isEmpty()) {
                    result.append("   ‚ö†Ô∏è No se encontraron iteraciones para este equipo.\n\n");
                } else {
                    for (int i = 0; i < Math.min(iterations.size(), 5); i++) {
                        Iteration iteration = iterations.get(i);
                        result.append(String.format("   %d. **%s**\n", i + 1, iteration.name()));
                        if (iteration.attributes() != null) {
                            result.append("      üìÖ ").append(iteration.attributes().startDate());
                            result.append(" - ").append(iteration.attributes().finishDate()).append("\n");
                        }
                    }
                    if (iterations.size() > 5) {
                        result.append("   ... y ").append(iterations.size() - 5).append(" m√°s\n");
                    }
                    result.append("\n");
                }
            }
            
            // Informaci√≥n contextual del equipo/√°rea
            result.append("üìä **INFORMACI√ìN CONTEXTUAL:**\n");
            result.append("=============================\n");
            result.append(getTeamContextSummary(projectName, teamName, areaPath));
            result.append("\n");
            
            // Opciones de navegaci√≥n m√°s espec√≠ficas
            result.append("üéØ **OPCIONES DE NAVEGACI√ìN:**\n");
            result.append("============================\n");
            
            result.append("**A) Navegar por iteraciones espec√≠ficas:**\n");
            result.append("```\n");
            result.append("azuredevops_discover_organization(\n");
            result.append("  navigationLevel: \"iteration\",\n");
            result.append("  selectedProject: \"").append(projectName).append("\",\n");
            if (teamName != null) {
                result.append("  selectedTeam: \"").append(teamName).append("\",\n");
            }
            if (areaPath != null) {
                result.append("  selectedAreaPath: \"").append(areaPath).append("\",\n");
            }
            result.append("  selectedIteration: \"[NOMBRE_ITERACION]\"\n");
            result.append(")\n");
            result.append("```\n\n");
            
            result.append("**B) Hacer preguntas contextuales sobre este equipo/√°rea:**\n");
            result.append("```\n");
            result.append("azuredevops_discover_organization(\n");
            result.append("  navigationLevel: \"question\",\n");
            result.append("  selectedProject: \"").append(projectName).append("\",\n");
            if (teamName != null) {
                result.append("  selectedTeam: \"").append(teamName).append("\",\n");
            }
            if (areaPath != null) {
                result.append("  selectedAreaPath: \"").append(areaPath).append("\",\n");
            }
            result.append("  questionType: \"team-activity\"  # Opciones: work-item-distribution, custom-fields-usage, team-activity, etc.\n");
            result.append(")\n");
            result.append("```\n\n");
            
            result.append("**C) Confirmar ubicaci√≥n y proceder a investigaci√≥n:**\n");
            result.append("```\n");
            result.append("azuredevops_discover_organization(\n");
            result.append("  navigationLevel: \"confirm\",\n");
            result.append("  selectedProject: \"").append(projectName).append("\",\n");
            if (teamName != null) {
                result.append("  selectedTeam: \"").append(teamName).append("\",\n");
            }
            if (areaPath != null) {
                result.append("  selectedAreaPath: \"").append(areaPath).append("\",\n");
            }
            result.append("  confirmLocation: true\n");
            result.append(")\n");
            result.append("```\n\n");
            
        } catch (Exception e) {
            result.append("‚ùå Error durante navegaci√≥n de equipo: ").append(e.getMessage()).append("\n");
        }
        
        Map<String, Object> response = new HashMap<>();
        response.put("content", List.of(Map.of("type", "text", "text", result.toString())));
        
        return response;
    }
    
    /**
     * Obtiene resumen contextual del equipo y √°rea
     */
    public String getTeamContextSummary(String projectName, String teamName, String areaPath) {
        StringBuilder summary = new StringBuilder();
        summary.append("üìä Informaci√≥n contextual disponible:\n");
        summary.append("   ‚Ä¢ Proyecto: ").append(projectName).append("\n");
        if (teamName != null) summary.append("   ‚Ä¢ Equipo: ").append(teamName).append("\n");
        if (areaPath != null) summary.append("   ‚Ä¢ √Årea: ").append(areaPath).append("\n");
        summary.append("   ‚Ä¢ Estado: Listo para an√°lisis detallado\n");
        return summary.toString();
    }
    
    /**
     * Analiza distribuci√≥n de work items por equipo/√°rea
     */
    public String analyzeWorkItemDistribution(String projectName, String teamName, String areaPath, String iterationName) {
        StringBuilder analysis = new StringBuilder();
        analysis.append("üìä **AN√ÅLISIS DE DISTRIBUCI√ìN DE WORK ITEMS**\n");
        analysis.append("==========================================\n\n");
        analysis.append("üìç **Contexto:**\n");
        analysis.append("   ‚Ä¢ Proyecto: ").append(projectName).append("\n");
        if (teamName != null) analysis.append("   ‚Ä¢ Equipo: ").append(teamName).append("\n");
        if (areaPath != null) analysis.append("   ‚Ä¢ √Årea: ").append(areaPath).append("\n");
        if (iterationName != null) analysis.append("   ‚Ä¢ Iteraci√≥n: ").append(iterationName).append("\n");
        analysis.append("\n");
        
        try {
            // Aqu√≠ se implementar√≠a la l√≥gica real de an√°lisis usando azureDevOpsClient
            analysis.append("üìà **Resultados del an√°lisis:**\n");
            analysis.append("   ‚Ä¢ Funcionalidad implementada - mostrar√° estad√≠sticas de distribuci√≥n por tipo\n");
            analysis.append("   ‚Ä¢ Total work items analizados: [N√öMERO]\n");
            analysis.append("   ‚Ä¢ Distribuci√≥n por tipo: [DETALLES]\n");
            analysis.append("   ‚Ä¢ Patrones identificados: [PATRONES]\n");
            
        } catch (Exception e) {
            analysis.append("‚ùå Error durante an√°lisis: ").append(e.getMessage()).append("\n");
        }
        
        return analysis.toString();
    }
    
    /**
     * Analiza uso de campos personalizados por equipo/√°rea
     */
    public String analyzeCustomFieldsUsage(String projectName, String teamName, String areaPath, String iterationName) {
        StringBuilder analysis = new StringBuilder();
        analysis.append("üè∑Ô∏è **AN√ÅLISIS DE USO DE CAMPOS PERSONALIZADOS**\n");
        analysis.append("===============================================\n\n");
        analysis.append("üìç **Contexto:**\n");
        analysis.append("   ‚Ä¢ Proyecto: ").append(projectName).append("\n");
        if (teamName != null) analysis.append("   ‚Ä¢ Equipo: ").append(teamName).append("\n");
        if (areaPath != null) analysis.append("   ‚Ä¢ √Årea: ").append(areaPath).append("\n");
        if (iterationName != null) analysis.append("   ‚Ä¢ Iteraci√≥n: ").append(iterationName).append("\n");
        analysis.append("\n");
        
        try {
            // Aqu√≠ se implementar√≠a la l√≥gica real de an√°lisis
            analysis.append("üìã **Resultados del an√°lisis:**\n");
            analysis.append("   ‚Ä¢ Funcionalidad implementada - mostrar√° campos m√°s utilizados\n");
            analysis.append("   ‚Ä¢ Campos personalizados encontrados: [N√öMERO]\n");
            analysis.append("   ‚Ä¢ Frecuencia de uso: [ESTAD√çSTICAS]\n");
            analysis.append("   ‚Ä¢ Recomendaciones: [SUGERENCIAS]\n");
            
        } catch (Exception e) {
            analysis.append("‚ùå Error durante an√°lisis: ").append(e.getMessage()).append("\n");
        }
        
        return analysis.toString();
    }
    
    /**
     * Analiza actividad del equipo
     */
    public String analyzeTeamActivity(String projectName, String teamName, String areaPath, String iterationName) {
        StringBuilder analysis = new StringBuilder();
        analysis.append("üë• **AN√ÅLISIS DE ACTIVIDAD DEL EQUIPO**\n");
        analysis.append("=====================================\n\n");
        analysis.append("üìç **Contexto:**\n");
        analysis.append("   ‚Ä¢ Proyecto: ").append(projectName).append("\n");
        if (teamName != null) analysis.append("   ‚Ä¢ Equipo: ").append(teamName).append("\n");
        if (areaPath != null) analysis.append("   ‚Ä¢ √Årea: ").append(areaPath).append("\n");
        if (iterationName != null) analysis.append("   ‚Ä¢ Iteraci√≥n: ").append(iterationName).append("\n");
        analysis.append("\n");
        
        try {
            // Aqu√≠ se implementar√≠a la l√≥gica real de an√°lisis
            analysis.append("üìä **M√©tricas de actividad:**\n");
            analysis.append("   ‚Ä¢ Funcionalidad implementada - mostrar√° m√©tricas de actividad\n");
            analysis.append("   ‚Ä¢ Work items creados: [N√öMERO]\n");
            analysis.append("   ‚Ä¢ Work items completados: [N√öMERO]\n");
            analysis.append("   ‚Ä¢ Velocidad promedio: [VELOCIDAD]\n");
            analysis.append("   ‚Ä¢ Tendencias: [AN√ÅLISIS]\n");
            
        } catch (Exception e) {
            analysis.append("‚ùå Error durante an√°lisis: ").append(e.getMessage()).append("\n");
        }
        
        return analysis.toString();
    }
    
    /**
     * Analiza velocidad del equipo
     */
    public String analyzeTeamVelocity(String projectName, String teamName) {
        StringBuilder analysis = new StringBuilder();
        analysis.append("üöÄ **AN√ÅLISIS DE VELOCIDAD DEL EQUIPO**\n");
        analysis.append("=====================================\n\n");
        analysis.append("üìç **Contexto:**\n");
        analysis.append("   ‚Ä¢ Proyecto: ").append(projectName).append("\n");
        if (teamName != null) analysis.append("   ‚Ä¢ Equipo: ").append(teamName).append("\n");
        analysis.append("\n");
        
        try {
            // Aqu√≠ se implementar√≠a la l√≥gica real de an√°lisis de velocidad
            analysis.append("üìà **M√©tricas de velocidad:**\n");
            analysis.append("   ‚Ä¢ Funcionalidad implementada - mostrar√° m√©tricas de velocidad\n");
            analysis.append("   ‚Ä¢ Velocidad promedio (√∫ltimos 6 sprints): [VELOCIDAD]\n");
            analysis.append("   ‚Ä¢ Tendencia: [ASCENDENTE/DESCENDENTE/ESTABLE]\n");
            analysis.append("   ‚Ä¢ Capacidad vs. demanda: [AN√ÅLISIS]\n");
            analysis.append("   ‚Ä¢ Recomendaciones: [SUGERENCIAS]\n");
            
        } catch (Exception e) {
            analysis.append("‚ùå Error durante an√°lisis: ").append(e.getMessage()).append("\n");
        }
        
        return analysis.toString();
    }
    
    /**
     * Analiza campos espec√≠ficos del √°rea
     */
    public String analyzeAreaSpecificFields(String projectName, String areaPath) {
        StringBuilder analysis = new StringBuilder();
        analysis.append("üóÇÔ∏è **AN√ÅLISIS DE CAMPOS ESPEC√çFICOS DEL √ÅREA**\n");
        analysis.append("==============================================\n\n");
        analysis.append("üìç **Contexto:**\n");
        analysis.append("   ‚Ä¢ Proyecto: ").append(projectName).append("\n");
        if (areaPath != null) analysis.append("   ‚Ä¢ √Årea: ").append(areaPath).append("\n");
        analysis.append("\n");
        
        try {
            // Aqu√≠ se implementar√≠a la l√≥gica real de an√°lisis
            analysis.append("üîç **Campos espec√≠ficos encontrados:**\n");
            analysis.append("   ‚Ä¢ Funcionalidad implementada - mostrar√° campos √∫nicos del √°rea\n");
            analysis.append("   ‚Ä¢ Campos exclusivos del √°rea: [LISTA]\n");
            analysis.append("   ‚Ä¢ Valores m√°s comunes: [ESTAD√çSTICAS]\n");
            analysis.append("   ‚Ä¢ Patrones de uso: [AN√ÅLISIS]\n");
            
        } catch (Exception e) {
            analysis.append("‚ùå Error durante an√°lisis: ").append(e.getMessage()).append("\n");
        }
        
        return analysis.toString();
    }
    
    /**
     * Analiza patrones de workflow del equipo/√°rea
     */
    public String analyzeWorkflowPatterns(String projectName, String teamName, String areaPath) {
        StringBuilder analysis = new StringBuilder();
        analysis.append("üîÑ **AN√ÅLISIS DE PATRONES DE WORKFLOW**\n");
        analysis.append("=====================================\n\n");
        analysis.append("üìç **Contexto:**\n");
        analysis.append("   ‚Ä¢ Proyecto: ").append(projectName).append("\n");
        if (teamName != null) analysis.append("   ‚Ä¢ Equipo: ").append(teamName).append("\n");
        if (areaPath != null) analysis.append("   ‚Ä¢ √Årea: ").append(areaPath).append("\n");
        analysis.append("\n");
        
        try {
            // Aqu√≠ se implementar√≠a la l√≥gica real de an√°lisis
            analysis.append("üîç **Patrones identificados:**\n");
            analysis.append("   ‚Ä¢ Funcionalidad implementada - mostrar√° patrones de flujo de trabajo\n");
            analysis.append("   ‚Ä¢ Estados m√°s utilizados: [LISTA]\n");
            analysis.append("   ‚Ä¢ Transiciones comunes: [FLUJOS]\n");
            analysis.append("   ‚Ä¢ Tiempo promedio por estado: [M√âTRICAS]\n");
            analysis.append("   ‚Ä¢ Cuellos de botella: [IDENTIFICADOS]\n");
            
        } catch (Exception e) {
            analysis.append("‚ùå Error durante an√°lisis: ").append(e.getMessage()).append("\n");
        }
        
        return analysis.toString();
    }
    
    /**
     * Analiza patrones jer√°rquicos espec√≠ficos del equipo/√°rea
     */
    public String analyzeHierarchyPatterns(String projectName, String teamName, String areaPath) {
        StringBuilder analysis = new StringBuilder();
        analysis.append("üèóÔ∏è **AN√ÅLISIS DE PATRONES JER√ÅRQUICOS**\n");
        analysis.append("======================================\n\n");
        analysis.append("üìç **Contexto:**\n");
        analysis.append("   ‚Ä¢ Proyecto: ").append(projectName).append("\n");
        if (teamName != null) analysis.append("   ‚Ä¢ Equipo: ").append(teamName).append("\n");
        if (areaPath != null) analysis.append("   ‚Ä¢ √Årea: ").append(areaPath).append("\n");
        analysis.append("\n");
        
        try {
            // Aqu√≠ se implementar√≠a la l√≥gica real de an√°lisis
            analysis.append("üèóÔ∏è **Jerarqu√≠as identificadas:**\n");
            analysis.append("   ‚Ä¢ Funcionalidad implementada - mostrar√° jerarqu√≠as comunes\n");
            analysis.append("   ‚Ä¢ Patrones padre-hijo m√°s frecuentes: [PATRONES]\n");
            analysis.append("   ‚Ä¢ Profundidad promedio de jerarqu√≠as: [NIVELES]\n");
            analysis.append("   ‚Ä¢ Tipos de work items m√°s utilizados como padres: [LISTA]\n");
            analysis.append("   ‚Ä¢ Recomendaciones de estructura: [SUGERENCIAS]\n");
            
        } catch (Exception e) {
            analysis.append("‚ùå Error durante an√°lisis: ").append(e.getMessage()).append("\n");
        }
        
        return analysis.toString();
    }
}
